// src/regfile_test.veryl

#[test(csr_irq)]
embed (inline) sv{{{

    module test;
        import veryl_csr_CsrPkg::*;
        logic i_clk;
        logic i_reset;
        
        logic i_csr_ena;
        logic [11:0] i_csr_addr;
        logic [31:0] i_32;
        logic [4:0] i_5;
        CsrOp i_csr_op;
        logic [31:0] o_data;
        
        veryl_csr_CsrIrq #(
            .Addr('h101),
            .ResetValue('hdead_beef)
        ) csr 
        (
            i_clk,
            i_reset,
            
            i_csr_ena,
            i_csr_addr,
            i_32,
            i_5,
            i_csr_op,
            
            o_data
        );

        initial begin
            i_clk = 0; 
            i_reset = 1; 

            i_csr_addr = 'h101;
           
            // hold reset
            #10; i_clk=1; #10; i_clk=0;
            assert (o_data == 'hdead_beef) else $error("0");
            
            i_reset = 0;
            i_csr_op = CsrOp_CSRRW;
            i_csr_ena = 1;
            i_32 = 'hdead_0000;

            #10; i_clk=1; #10; i_clk=0;

            i_csr_op = CsrOp_CSRRS;
            i_32 = 'h_0000_beef;

            #10; i_clk=1; #10; i_clk=0;

            i_csr_op = CsrOp_CSRRC;
            i_32 = 'h_dead_0000;

            #10; i_clk=1; #10; i_clk=0;

            i_csr_op = CsrOp_CSRRWI;
            i_5 = 'h_1f;

            #10; i_clk=1; #10; i_clk=0;

            i_csr_op = CsrOp_CSRRCI;
            i_5 = 'h_0f;

            #10; i_clk=1; #10; i_clk=0;

            i_csr_op = CsrOp_CSRRSI;
            i_5 = 'h_0d;

            #10; i_clk=1; #10; i_clk=0;




            $finish;
         end
   endmodule
}}}

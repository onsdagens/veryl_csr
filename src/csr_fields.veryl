// src/csr_fields.veryl

import CsrPkg::*;

module CsrFields #(
    param Addr      : logic<12> = 0, // 12 bit address for the CSR
    param ResetValue: logic<32> = 0, // 32 bit default value
) (
    i_clk  : input clock, // dedicated clock
    i_reset: input reset, // dedicated reset

    i_csr_ena : input logic      ,
    i_csr_addr: input CsrAddr    ,
    i_rs1_data: input logic  <32>,
    i_rs1     : input Reg        ,
    i_rd      : input Reg        ,
    i_csr_op  : input logic  <3> ,

    o_data: output logic<32>,
) {
    var reg_data: logic<32>;

    var reg_w_ena : logic    ;
    var reg_w_data: logic<32>;
    var reg_r_ena : logic    ;
    var reg_r_data: logic<32>;

    var reg_w_ena0 : logic    ;
    var reg_w_data0: logic<32>;
    var reg_r_ena0 : logic    ;
    var reg_r_data0: logic<32>;

    var reg_w_ena1 : logic    ;
    var reg_w_data1: logic<32>;
    var reg_r_ena1 : logic    ;
    var reg_r_data1: logic<32>;

    var reg_w_ena2 : logic    ;
    var reg_w_data2: logic<32>;
    var reg_r_ena2 : logic    ;
    var reg_r_data2: logic<32>;

    // read access to whole register
    inst csr: Csr #(
        Addr       ,
        ImmWidth: 0, // 0 bit field, no immediate field access
    ) (
        i_csr_ena               ,
        i_csr_addr              ,
        i_rs1_data              ,
        i_rs1                   ,
        i_rd                    ,
        i_csr_op                ,
        i_reg_data  : reg_data  ,
        o_reg_w_ena : reg_w_ena ,
        o_reg_w_data: reg_w_data,
        o_reg_r_ena : reg_r_ena ,
        o_reg_r_data: reg_r_data,
    );

    // default, 5 bit field at offset 0
    inst csr0: Csr #(
        Addr       : (Addr as u32 + 1) as CsrAddr,
        FieldOffset: 0                           , // not needed
        FieldWidth : 5                           ,
    ) (
        i_csr_ena                ,
        i_csr_addr               ,
        i_rs1_data               ,
        i_rs1                    ,
        i_rd                     ,
        i_csr_op                 ,
        i_reg_data  : reg_data   ,
        o_reg_w_ena : reg_w_ena0 ,
        o_reg_w_data: reg_w_data0,
        o_reg_r_ena : reg_r_ena0 ,
        o_reg_r_data: reg_r_data0,
    );

    // 4 bit field at offset 8
    inst csr1: Csr #(
        Addr       : (Addr as u32 + 2) as CsrAddr,
        FieldOffset: 8                           ,
        FieldWidth : 4                           , // 4 bit field
        ReadShift  : 0                           ,
        WriteShift : 0                           ,
    ) (
        i_csr_ena                ,
        i_csr_addr               ,
        i_rs1_data               ,
        i_rs1                    ,
        i_rd                     ,
        i_csr_op                 ,
        i_reg_data  : reg_data   ,
        o_reg_w_ena : reg_w_ena1 ,
        o_reg_w_data: reg_w_data1,
        o_reg_r_ena : reg_r_ena1 ,
        o_reg_r_data: reg_r_data1,
    );

    // 2 bit field at offset 12
    inst csr2: Csr #(
        Addr       : (Addr as u32 + 3) as CsrAddr,
        FieldOffset: 12                          ,
        FieldWidth : 2                           , // two bit field
        ReadShift  : 1                           ,
        WriteShift : 1                           ,
    ) (
        i_csr_ena                ,
        i_csr_addr               ,
        i_rs1_data               ,
        i_rs1                    ,
        i_rd                     ,
        i_csr_op                 ,
        i_reg_data  : reg_data   ,
        o_reg_w_ena : reg_w_ena2 ,
        o_reg_w_data: reg_w_data2,
        o_reg_r_ena : reg_r_ena2 ,
        o_reg_r_data: reg_r_data2,
    );

    always_ff {
        if i_reset {
            reg_data = ResetValue;
        } else if reg_w_ena { // CSR 100
            reg_data = reg_w_data & 'hffff_3f1f;
        } else if reg_w_ena0 { // CSR 101
            reg_data = reg_w_data0;
        } else if reg_w_ena1 { // CSR 102
            reg_data = reg_w_data1 | 'h8000_0000;
        } else if reg_w_ena2 & ~reg_r_ena2 { // CSR 103, write not read
            reg_data = reg_w_data2;
        } else if reg_w_ena2 & reg_r_ena2 { // CSR 103, write and read
            reg_data = reg_w_data2 & 32'h7fff_ffff;
        } else if reg_r_ena2 { // CSR 103, read only
            reg_data = reg_data & 32'h7fff_ffff;
        }
    }

    assign o_data = (reg_r_data & 'hffff_3f1f) | reg_r_data0 | reg_r_data1 | reg_r_data2;
}
